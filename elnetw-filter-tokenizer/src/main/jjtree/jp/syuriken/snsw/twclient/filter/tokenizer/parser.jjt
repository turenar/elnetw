options{
	STATIC=false;
	UNICODE_INPUT=true;
	MULTI=true;
	VISITOR=true;
	JDK_VERSION="1.6";
	NODE_PREFIX="QueryToken";
}

PARSER_BEGIN(FilterParser)
package jp.syuriken.snsw.twclient.filter.tokenizer;

public class FilterParser{
	public static void main(String[] args) throws ParseException {
		FilterParser parser = new FilterParser(System.in);
		parser.enable_tracing();
		parser.Start();
	}
}
PARSER_END(FilterParser)

SKIP:
{
	" " | "\r" | "\t" | "\n"
}

TOKEN:
{
	< #OPERATOR_CHAR: [":", "!", "=", "<", ">", "~", "?"] >
	| < OPERATOR: (<OPERATOR_CHAR>)+ >
	| < LPARAN: "(" >
	| < RPARAN: ")" >
	| < COMMA: "," >
	| < INT_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
	| < BOOL_LITERAL: ( "false" | "true" ) >
	| < STRING_LITERAL: "\""
		( (~["\"","\\","\n","\r"]) | ("\\" ["n","\\","'","\""] ) )*
			"\"" >
	| < #ALPHACHAR: ["a"-"z","A"-"Z","_"] >
	| < ALPHASTR: (<ALPHACHAR>)+ >
}

QueryTokenStart Start() #Start: {}
{
	(Query())? <EOF>
	{ return jjtThis; }
}

void Query(): {}
{
	( LOOKAHEAD(2) Function() | Property() )
}

void Property(): {}
{
	PropertyName() (PropertyOperator() (PropertyValue())? )?
}

void PropertyName(): { Token t; }
{
	t=<ALPHASTR> { jjtThis.jjtSetValue(t.image); }
}

void PropertyOperator(): { Token t;}
{
	t=<OPERATOR> { jjtThis.jjtSetValue(t.image); }
}

void PropertyValue(): { Token t;}
{
	(t=<INT_LITERAL> | t=<BOOL_LITERAL> | t=<STRING_LITERAL>) { jjtThis.jjtSetValue(t.image); }
}

void Function(): {}
{
	FunctionName() "(" (
		( LOOKAHEAD(2) Function() | Property() )
		( "," (LOOKAHEAD(2) Function() | Property() ))*
	)? ")"
}

void FunctionName(): { Token t; }
{
	t=<ALPHASTR> { jjtThis.jjtSetValue(t.image); }
}
