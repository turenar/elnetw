package jp.syuriken.snsw.twclient;

import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Properties;

/**
 * 登録済みのリスナに変更を通知するプロパティーリストです。
 * 
 * @author $Author$
 */
public class ClientProperties extends Properties {
	
	private ArrayList<PropertyChangeListener> listeners;
	
	private File storeFile;
	
	
	/**
	 * インスタンスを生成する。
	 * 
	 */
	public ClientProperties() {
		this(null);
	}
	
	public ClientProperties(Properties defaults) {
		super(defaults);
		listeners = new ArrayList<PropertyChangeListener>();
	}
	
	/**
	 * TODO snsoftware
	 * 
	 */
	public void addPropertyChangedListner(PropertyChangeListener listener) {
		listeners.add(listener);
	}
	
	/**
	 * TODO snsoftware
	 * 
	 * @param key
	 * @param oldValue
	 * @param newValue
	 */
	private void firePropetyChanged(String key, String oldValue, String newValue) {
		PropertyChangeEvent evt = new PropertyChangeEvent(this, key, oldValue, newValue);
		for (PropertyChangeListener listener : listeners) {
			listener.propertyChange(evt);
		}
	}
	
	public Color getColor(String key) {
		String value = getProperty(key);
		String[] rgba = value.split(",");
		if (rgba.length == 4) {
			return new Color(Integer.parseInt(rgba[0]), Integer.parseInt(rgba[1]), Integer.parseInt(rgba[2]),
					Integer.parseInt(rgba[3]));
		} else if (rgba.length == 3) {
			return new Color(Integer.parseInt(rgba[0]), Integer.parseInt(rgba[1]), Integer.parseInt(rgba[2]));
		} else {
			throw new IllegalArgumentException(MessageFormat.format("{0}はColorに使用できる値ではありません: {1}", key, value));
		}
	}
	
	public int getInteger(String key) {
		return Integer.parseInt(getProperty(key));
	}
	
	public long getLong(String key) {
		return Long.parseLong(getProperty(key));
	}
	
	/**
	 * TODO snsoftware
	 * 
	 * @param string
	 * @return
	 */
	public int getSeconds(String key) {
		return getInteger(key) * 1000;
	}
	
	public void removePropertyChangedListner(PropertyChangeListener listener) {
		listeners.remove(listener);
	}
	
	/**
	 * <p>プロパティを設定して、登録済みのリスナに変更を通知します。</p>
	 * {@inheritDoc}
	 */
	@Override
	public synchronized Object setProperty(String key, String newValue) {
		String oldValue = getProperty(key);
		firePropetyChanged(key, oldValue, newValue);
		return super.setProperty(key, newValue);
	}
	
	public void setStoreFile(File storeFile) {
		this.storeFile = storeFile;
	}
	
	public void store() {
		store("Auto generated by jp.syuriken.snsw.twclient.ClientProperties");
	}
	
	/**
	 * TODO snsoftware
	 * 
	 */
	public void store(String comments) {
		FileWriter fileWriter = null;
		BufferedWriter bufferedWriter = null;
		try {
			fileWriter = new FileWriter(storeFile);
			bufferedWriter = new BufferedWriter(fileWriter);
			store(bufferedWriter, comments);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (bufferedWriter != null) {
				try {
					bufferedWriter.flush();
					bufferedWriter.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
}
